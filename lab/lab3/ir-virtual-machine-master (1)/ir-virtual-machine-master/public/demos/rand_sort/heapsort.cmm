/*
 * This program generates 50 random numbers.
 * Then it sorts the numbers using heap sort and prints the sorted array.
 */

int kNext;

int mod(int mod_x, int mod_y)
{
    return mod_x - mod_y * (mod_x / mod_y);
}

int srand32(int srand32_seed)
{
    kNext = srand32_seed;
    return 0;
}

int rand32()
{
    int rand32_result;

    kNext = kNext * 1103515245;
    kNext = kNext + 12345;
    rand32_result = mod(kNext / 65536, 2048);

    kNext = kNext * 1103515245;
    kNext = kNext + 12345;
    rand32_result = rand32_result * 1024;
    rand32_result = rand32_result + mod(kNext / 65536, 1024);

    kNext = kNext * 1103515245;
    kNext = kNext + 12345;
    rand32_result = rand32_result * 1024;
    rand32_result = rand32_result + mod(kNext / 65536, 1024);

    return rand32_result;
}

int buildheap(int buildheap_data[50], int buildheap_i, int buildheap_n)
{
    int buildheap_temp = buildheap_data[buildheap_i];
    int buildheap_j = 2 * buildheap_i + 1;
    int buildheap_break = 0;
    while (buildheap_j < buildheap_n && !buildheap_break)
    {
        if (buildheap_j + 1 < buildheap_n && buildheap_data[buildheap_j + 1] > buildheap_data[buildheap_j])
        {
            buildheap_j = buildheap_j + 1;
        }

        if (buildheap_temp < buildheap_data[buildheap_j])
        {
            buildheap_data[buildheap_i] = buildheap_data[buildheap_j];
            buildheap_i = buildheap_j;
        }
        else
        {
            buildheap_break = 1;
        }

        buildheap_j = 2 * buildheap_j + 1;
    }

    buildheap_data[buildheap_i] = buildheap_temp;

    return 0;
}

int heapsort(int heapsort_data[1], int heapsort_n)
{
    int heapsort_i = heapsort_n / 2 - 1;
    int heapsort_t;

    while (heapsort_i >= 0)
    {
        buildheap(heapsort_data, heapsort_i, heapsort_n);
        heapsort_i = heapsort_i - 1;
    }

    heapsort_i = heapsort_n - 1;

    while (heapsort_i > 0)
    {
        heapsort_t = heapsort_data[0];
        heapsort_data[0] = heapsort_data[heapsort_i];
        heapsort_data[heapsort_i] = heapsort_t;
        buildheap(heapsort_data, 0, heapsort_i);
        heapsort_i = heapsort_i - 1;
    }

    return 0;
}

int main()
{
    int n = 50;
    int data[50];
    int i = 0;

    // Take advantage of Virtual Machine's randomized stack to provide
    // random seed. In C this is undefined behaviour and DON'T DO THIS.
    int seed[1];
    srand32(seed[0]);

    while (i < n)
    {
        data[i] = rand32();
        i = i + 1;
    }

    heapsort(data, n);

    i = 0;

    while (i < n)
    {
        write(data[i]);
        i = i + 1;
    }

    return 0;
}